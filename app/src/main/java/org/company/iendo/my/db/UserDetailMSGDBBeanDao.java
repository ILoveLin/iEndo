package org.company.iendo.my.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import org.company.iendo.bean.beandb.UserDetailMSGDBBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DETAIL_MSGDBBEAN".
*/
public class UserDetailMSGDBBeanDao extends AbstractDao<UserDetailMSGDBBean, Long> {

    public static final String TABLENAME = "USER_DETAIL_MSGDBBEAN";

    /**
     * Properties of entity UserDetailMSGDBBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ID = new Property(1, String.class, "ID", false, "ID");
        public final static Property Tag = new Property(2, String.class, "tag", false, "TAG");
        public final static Property RecordType = new Property(3, String.class, "RecordType", false, "RECORD_TYPE");
        public final static Property PatientID = new Property(4, String.class, "PatientID", false, "PATIENT_ID");
        public final static Property Married = new Property(5, String.class, "Married", false, "MARRIED");
        public final static Property Name = new Property(6, String.class, "Name", false, "NAME");
        public final static Property Sex = new Property(7, String.class, "Sex", false, "SEX");
        public final static Property Tel = new Property(8, String.class, "Tel", false, "TEL");
        public final static Property Address = new Property(9, String.class, "Address", false, "ADDRESS");
        public final static Property PatientNo = new Property(10, String.class, "PatientNo", false, "PATIENT_NO");
        public final static Property CardID = new Property(11, String.class, "CardID", false, "CARD_ID");
        public final static Property MedHistory = new Property(12, String.class, "MedHistory", false, "MED_HISTORY");
        public final static Property FamilyHistory = new Property(13, String.class, "FamilyHistory", false, "FAMILY_HISTORY");
        public final static Property Race = new Property(14, String.class, "Race", false, "RACE");
        public final static Property Occupatior = new Property(15, String.class, "Occupatior", false, "OCCUPATIOR");
        public final static Property InsuranceID = new Property(16, String.class, "InsuranceID", false, "INSURANCE_ID");
        public final static Property NativePlace = new Property(17, String.class, "NativePlace", false, "NATIVE_PLACE");
        public final static Property IsInHospital = new Property(18, String.class, "IsInHospital", false, "IS_IN_HOSPITAL");
        public final static Property LastCheckUserID = new Property(19, String.class, "LastCheckUserID", false, "LAST_CHECK_USER_ID");
        public final static Property DOB = new Property(20, String.class, "DOB", false, "DOB");
        public final static Property PatientAge = new Property(21, String.class, "PatientAge", false, "PATIENT_AGE");
        public final static Property AgeUnit = new Property(22, String.class, "AgeUnit", false, "AGE_UNIT");
        public final static Property CaseNo = new Property(23, String.class, "CaseNo", false, "CASE_NO");
        public final static Property ReturnVisit = new Property(24, String.class, "ReturnVisit", false, "RETURN_VISIT");
        public final static Property BedID = new Property(25, String.class, "BedID", false, "BED_ID");
        public final static Property WardID = new Property(26, String.class, "WardID", false, "WARD_ID");
        public final static Property CaseID = new Property(27, String.class, "CaseID", false, "CASE_ID");
        public final static Property SubmitDoctor = new Property(28, String.class, "SubmitDoctor", false, "SUBMIT_DOCTOR");
        public final static Property Department = new Property(29, String.class, "Department", false, "DEPARTMENT");
        public final static Property Device = new Property(30, String.class, "Device", false, "DEVICE");
        public final static Property Fee = new Property(31, String.class, "Fee", false, "FEE");
        public final static Property FeeType = new Property(32, String.class, "FeeType", false, "FEE_TYPE");
        public final static Property ChiefComplaint = new Property(33, String.class, "ChiefComplaint", false, "CHIEF_COMPLAINT");
        public final static Property Test = new Property(34, String.class, "Test", false, "TEST");
        public final static Property Advice = new Property(35, String.class, "Advice", false, "ADVICE");
        public final static Property InpatientID = new Property(36, String.class, "InpatientID", false, "INPATIENT_ID");
        public final static Property OutpatientID = new Property(37, String.class, "OutpatientID", false, "OUTPATIENT_ID");
        public final static Property Others = new Property(38, String.class, "Others", false, "OTHERS");
        public final static Property Await1 = new Property(39, String.class, "Await1", false, "AWAIT1");
        public final static Property Await2 = new Property(40, String.class, "Await2", false, "AWAIT2");
        public final static Property Await3 = new Property(41, String.class, "Await3", false, "AWAIT3");
        public final static Property Await4 = new Property(42, String.class, "Await4", false, "AWAIT4");
        public final static Property Await5 = new Property(43, String.class, "Await5", false, "AWAIT5");
        public final static Property Biopsy = new Property(44, String.class, "Biopsy", false, "BIOPSY");
        public final static Property Ctology = new Property(45, String.class, "Ctology", false, "CTOLOGY");
        public final static Property Pathology = new Property(46, String.class, "Pathology", false, "PATHOLOGY");
        public final static Property CheckDate = new Property(47, String.class, "CheckDate", false, "CHECK_DATE");
        public final static Property RecordDate = new Property(48, String.class, "RecordDate", false, "RECORD_DATE");
        public final static Property Printed = new Property(49, String.class, "Printed", false, "PRINTED");
        public final static Property Upload = new Property(50, String.class, "Upload", false, "UPLOAD");
        public final static Property Bespeak = new Property(51, String.class, "Bespeak", false, "BESPEAK");
        public final static Property Images = new Property(52, String.class, "Images", false, "IMAGES");
        public final static Property ReportStyle = new Property(53, String.class, "ReportStyle", false, "REPORT_STYLE");
        public final static Property UserName = new Property(54, String.class, "UserName", false, "USER_NAME");
        public final static Property EndoType = new Property(55, String.class, "EndoType", false, "ENDO_TYPE");
        public final static Property StudyInstanceUID = new Property(56, String.class, "StudyInstanceUID", false, "STUDY_INSTANCE_UID");
        public final static Property SeriesInstanceUID = new Property(57, String.class, "SeriesInstanceUID", false, "SERIES_INSTANCE_UID");
        public final static Property ExaminingPhysician = new Property(58, String.class, "ExaminingPhysician", false, "EXAMINING_PHYSICIAN");
        public final static Property ClinicalDiagnosis = new Property(59, String.class, "ClinicalDiagnosis", false, "CLINICAL_DIAGNOSIS");
        public final static Property CheckContent = new Property(60, String.class, "CheckContent", false, "CHECK_CONTENT");
        public final static Property CheckDiagnosis = new Property(61, String.class, "CheckDiagnosis", false, "CHECK_DIAGNOSIS");
    }


    public UserDetailMSGDBBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserDetailMSGDBBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DETAIL_MSGDBBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID\" TEXT UNIQUE ," + // 1: ID
                "\"TAG\" TEXT," + // 2: tag
                "\"RECORD_TYPE\" TEXT," + // 3: RecordType
                "\"PATIENT_ID\" TEXT," + // 4: PatientID
                "\"MARRIED\" TEXT," + // 5: Married
                "\"NAME\" TEXT," + // 6: Name
                "\"SEX\" TEXT," + // 7: Sex
                "\"TEL\" TEXT," + // 8: Tel
                "\"ADDRESS\" TEXT," + // 9: Address
                "\"PATIENT_NO\" TEXT," + // 10: PatientNo
                "\"CARD_ID\" TEXT," + // 11: CardID
                "\"MED_HISTORY\" TEXT," + // 12: MedHistory
                "\"FAMILY_HISTORY\" TEXT," + // 13: FamilyHistory
                "\"RACE\" TEXT," + // 14: Race
                "\"OCCUPATIOR\" TEXT," + // 15: Occupatior
                "\"INSURANCE_ID\" TEXT," + // 16: InsuranceID
                "\"NATIVE_PLACE\" TEXT," + // 17: NativePlace
                "\"IS_IN_HOSPITAL\" TEXT," + // 18: IsInHospital
                "\"LAST_CHECK_USER_ID\" TEXT," + // 19: LastCheckUserID
                "\"DOB\" TEXT," + // 20: DOB
                "\"PATIENT_AGE\" TEXT," + // 21: PatientAge
                "\"AGE_UNIT\" TEXT," + // 22: AgeUnit
                "\"CASE_NO\" TEXT," + // 23: CaseNo
                "\"RETURN_VISIT\" TEXT," + // 24: ReturnVisit
                "\"BED_ID\" TEXT," + // 25: BedID
                "\"WARD_ID\" TEXT," + // 26: WardID
                "\"CASE_ID\" TEXT," + // 27: CaseID
                "\"SUBMIT_DOCTOR\" TEXT," + // 28: SubmitDoctor
                "\"DEPARTMENT\" TEXT," + // 29: Department
                "\"DEVICE\" TEXT," + // 30: Device
                "\"FEE\" TEXT," + // 31: Fee
                "\"FEE_TYPE\" TEXT," + // 32: FeeType
                "\"CHIEF_COMPLAINT\" TEXT," + // 33: ChiefComplaint
                "\"TEST\" TEXT," + // 34: Test
                "\"ADVICE\" TEXT," + // 35: Advice
                "\"INPATIENT_ID\" TEXT," + // 36: InpatientID
                "\"OUTPATIENT_ID\" TEXT," + // 37: OutpatientID
                "\"OTHERS\" TEXT," + // 38: Others
                "\"AWAIT1\" TEXT," + // 39: Await1
                "\"AWAIT2\" TEXT," + // 40: Await2
                "\"AWAIT3\" TEXT," + // 41: Await3
                "\"AWAIT4\" TEXT," + // 42: Await4
                "\"AWAIT5\" TEXT," + // 43: Await5
                "\"BIOPSY\" TEXT," + // 44: Biopsy
                "\"CTOLOGY\" TEXT," + // 45: Ctology
                "\"PATHOLOGY\" TEXT," + // 46: Pathology
                "\"CHECK_DATE\" TEXT," + // 47: CheckDate
                "\"RECORD_DATE\" TEXT," + // 48: RecordDate
                "\"PRINTED\" TEXT," + // 49: Printed
                "\"UPLOAD\" TEXT," + // 50: Upload
                "\"BESPEAK\" TEXT," + // 51: Bespeak
                "\"IMAGES\" TEXT," + // 52: Images
                "\"REPORT_STYLE\" TEXT," + // 53: ReportStyle
                "\"USER_NAME\" TEXT," + // 54: UserName
                "\"ENDO_TYPE\" TEXT," + // 55: EndoType
                "\"STUDY_INSTANCE_UID\" TEXT," + // 56: StudyInstanceUID
                "\"SERIES_INSTANCE_UID\" TEXT," + // 57: SeriesInstanceUID
                "\"EXAMINING_PHYSICIAN\" TEXT," + // 58: ExaminingPhysician
                "\"CLINICAL_DIAGNOSIS\" TEXT," + // 59: ClinicalDiagnosis
                "\"CHECK_CONTENT\" TEXT," + // 60: CheckContent
                "\"CHECK_DIAGNOSIS\" TEXT);"); // 61: CheckDiagnosis
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DETAIL_MSGDBBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDetailMSGDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(3, tag);
        }
 
        String RecordType = entity.getRecordType();
        if (RecordType != null) {
            stmt.bindString(4, RecordType);
        }
 
        String PatientID = entity.getPatientID();
        if (PatientID != null) {
            stmt.bindString(5, PatientID);
        }
 
        String Married = entity.getMarried();
        if (Married != null) {
            stmt.bindString(6, Married);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(7, Name);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(8, Sex);
        }
 
        String Tel = entity.getTel();
        if (Tel != null) {
            stmt.bindString(9, Tel);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(10, Address);
        }
 
        String PatientNo = entity.getPatientNo();
        if (PatientNo != null) {
            stmt.bindString(11, PatientNo);
        }
 
        String CardID = entity.getCardID();
        if (CardID != null) {
            stmt.bindString(12, CardID);
        }
 
        String MedHistory = entity.getMedHistory();
        if (MedHistory != null) {
            stmt.bindString(13, MedHistory);
        }
 
        String FamilyHistory = entity.getFamilyHistory();
        if (FamilyHistory != null) {
            stmt.bindString(14, FamilyHistory);
        }
 
        String Race = entity.getRace();
        if (Race != null) {
            stmt.bindString(15, Race);
        }
 
        String Occupatior = entity.getOccupatior();
        if (Occupatior != null) {
            stmt.bindString(16, Occupatior);
        }
 
        String InsuranceID = entity.getInsuranceID();
        if (InsuranceID != null) {
            stmt.bindString(17, InsuranceID);
        }
 
        String NativePlace = entity.getNativePlace();
        if (NativePlace != null) {
            stmt.bindString(18, NativePlace);
        }
 
        String IsInHospital = entity.getIsInHospital();
        if (IsInHospital != null) {
            stmt.bindString(19, IsInHospital);
        }
 
        String LastCheckUserID = entity.getLastCheckUserID();
        if (LastCheckUserID != null) {
            stmt.bindString(20, LastCheckUserID);
        }
 
        String DOB = entity.getDOB();
        if (DOB != null) {
            stmt.bindString(21, DOB);
        }
 
        String PatientAge = entity.getPatientAge();
        if (PatientAge != null) {
            stmt.bindString(22, PatientAge);
        }
 
        String AgeUnit = entity.getAgeUnit();
        if (AgeUnit != null) {
            stmt.bindString(23, AgeUnit);
        }
 
        String CaseNo = entity.getCaseNo();
        if (CaseNo != null) {
            stmt.bindString(24, CaseNo);
        }
 
        String ReturnVisit = entity.getReturnVisit();
        if (ReturnVisit != null) {
            stmt.bindString(25, ReturnVisit);
        }
 
        String BedID = entity.getBedID();
        if (BedID != null) {
            stmt.bindString(26, BedID);
        }
 
        String WardID = entity.getWardID();
        if (WardID != null) {
            stmt.bindString(27, WardID);
        }
 
        String CaseID = entity.getCaseID();
        if (CaseID != null) {
            stmt.bindString(28, CaseID);
        }
 
        String SubmitDoctor = entity.getSubmitDoctor();
        if (SubmitDoctor != null) {
            stmt.bindString(29, SubmitDoctor);
        }
 
        String Department = entity.getDepartment();
        if (Department != null) {
            stmt.bindString(30, Department);
        }
 
        String Device = entity.getDevice();
        if (Device != null) {
            stmt.bindString(31, Device);
        }
 
        String Fee = entity.getFee();
        if (Fee != null) {
            stmt.bindString(32, Fee);
        }
 
        String FeeType = entity.getFeeType();
        if (FeeType != null) {
            stmt.bindString(33, FeeType);
        }
 
        String ChiefComplaint = entity.getChiefComplaint();
        if (ChiefComplaint != null) {
            stmt.bindString(34, ChiefComplaint);
        }
 
        String Test = entity.getTest();
        if (Test != null) {
            stmt.bindString(35, Test);
        }
 
        String Advice = entity.getAdvice();
        if (Advice != null) {
            stmt.bindString(36, Advice);
        }
 
        String InpatientID = entity.getInpatientID();
        if (InpatientID != null) {
            stmt.bindString(37, InpatientID);
        }
 
        String OutpatientID = entity.getOutpatientID();
        if (OutpatientID != null) {
            stmt.bindString(38, OutpatientID);
        }
 
        String Others = entity.getOthers();
        if (Others != null) {
            stmt.bindString(39, Others);
        }
 
        String Await1 = entity.getAwait1();
        if (Await1 != null) {
            stmt.bindString(40, Await1);
        }
 
        String Await2 = entity.getAwait2();
        if (Await2 != null) {
            stmt.bindString(41, Await2);
        }
 
        String Await3 = entity.getAwait3();
        if (Await3 != null) {
            stmt.bindString(42, Await3);
        }
 
        String Await4 = entity.getAwait4();
        if (Await4 != null) {
            stmt.bindString(43, Await4);
        }
 
        String Await5 = entity.getAwait5();
        if (Await5 != null) {
            stmt.bindString(44, Await5);
        }
 
        String Biopsy = entity.getBiopsy();
        if (Biopsy != null) {
            stmt.bindString(45, Biopsy);
        }
 
        String Ctology = entity.getCtology();
        if (Ctology != null) {
            stmt.bindString(46, Ctology);
        }
 
        String Pathology = entity.getPathology();
        if (Pathology != null) {
            stmt.bindString(47, Pathology);
        }
 
        String CheckDate = entity.getCheckDate();
        if (CheckDate != null) {
            stmt.bindString(48, CheckDate);
        }
 
        String RecordDate = entity.getRecordDate();
        if (RecordDate != null) {
            stmt.bindString(49, RecordDate);
        }
 
        String Printed = entity.getPrinted();
        if (Printed != null) {
            stmt.bindString(50, Printed);
        }
 
        String Upload = entity.getUpload();
        if (Upload != null) {
            stmt.bindString(51, Upload);
        }
 
        String Bespeak = entity.getBespeak();
        if (Bespeak != null) {
            stmt.bindString(52, Bespeak);
        }
 
        String Images = entity.getImages();
        if (Images != null) {
            stmt.bindString(53, Images);
        }
 
        String ReportStyle = entity.getReportStyle();
        if (ReportStyle != null) {
            stmt.bindString(54, ReportStyle);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(55, UserName);
        }
 
        String EndoType = entity.getEndoType();
        if (EndoType != null) {
            stmt.bindString(56, EndoType);
        }
 
        String StudyInstanceUID = entity.getStudyInstanceUID();
        if (StudyInstanceUID != null) {
            stmt.bindString(57, StudyInstanceUID);
        }
 
        String SeriesInstanceUID = entity.getSeriesInstanceUID();
        if (SeriesInstanceUID != null) {
            stmt.bindString(58, SeriesInstanceUID);
        }
 
        String ExaminingPhysician = entity.getExaminingPhysician();
        if (ExaminingPhysician != null) {
            stmt.bindString(59, ExaminingPhysician);
        }
 
        String ClinicalDiagnosis = entity.getClinicalDiagnosis();
        if (ClinicalDiagnosis != null) {
            stmt.bindString(60, ClinicalDiagnosis);
        }
 
        String CheckContent = entity.getCheckContent();
        if (CheckContent != null) {
            stmt.bindString(61, CheckContent);
        }
 
        String CheckDiagnosis = entity.getCheckDiagnosis();
        if (CheckDiagnosis != null) {
            stmt.bindString(62, CheckDiagnosis);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDetailMSGDBBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(2, ID);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(3, tag);
        }
 
        String RecordType = entity.getRecordType();
        if (RecordType != null) {
            stmt.bindString(4, RecordType);
        }
 
        String PatientID = entity.getPatientID();
        if (PatientID != null) {
            stmt.bindString(5, PatientID);
        }
 
        String Married = entity.getMarried();
        if (Married != null) {
            stmt.bindString(6, Married);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(7, Name);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(8, Sex);
        }
 
        String Tel = entity.getTel();
        if (Tel != null) {
            stmt.bindString(9, Tel);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(10, Address);
        }
 
        String PatientNo = entity.getPatientNo();
        if (PatientNo != null) {
            stmt.bindString(11, PatientNo);
        }
 
        String CardID = entity.getCardID();
        if (CardID != null) {
            stmt.bindString(12, CardID);
        }
 
        String MedHistory = entity.getMedHistory();
        if (MedHistory != null) {
            stmt.bindString(13, MedHistory);
        }
 
        String FamilyHistory = entity.getFamilyHistory();
        if (FamilyHistory != null) {
            stmt.bindString(14, FamilyHistory);
        }
 
        String Race = entity.getRace();
        if (Race != null) {
            stmt.bindString(15, Race);
        }
 
        String Occupatior = entity.getOccupatior();
        if (Occupatior != null) {
            stmt.bindString(16, Occupatior);
        }
 
        String InsuranceID = entity.getInsuranceID();
        if (InsuranceID != null) {
            stmt.bindString(17, InsuranceID);
        }
 
        String NativePlace = entity.getNativePlace();
        if (NativePlace != null) {
            stmt.bindString(18, NativePlace);
        }
 
        String IsInHospital = entity.getIsInHospital();
        if (IsInHospital != null) {
            stmt.bindString(19, IsInHospital);
        }
 
        String LastCheckUserID = entity.getLastCheckUserID();
        if (LastCheckUserID != null) {
            stmt.bindString(20, LastCheckUserID);
        }
 
        String DOB = entity.getDOB();
        if (DOB != null) {
            stmt.bindString(21, DOB);
        }
 
        String PatientAge = entity.getPatientAge();
        if (PatientAge != null) {
            stmt.bindString(22, PatientAge);
        }
 
        String AgeUnit = entity.getAgeUnit();
        if (AgeUnit != null) {
            stmt.bindString(23, AgeUnit);
        }
 
        String CaseNo = entity.getCaseNo();
        if (CaseNo != null) {
            stmt.bindString(24, CaseNo);
        }
 
        String ReturnVisit = entity.getReturnVisit();
        if (ReturnVisit != null) {
            stmt.bindString(25, ReturnVisit);
        }
 
        String BedID = entity.getBedID();
        if (BedID != null) {
            stmt.bindString(26, BedID);
        }
 
        String WardID = entity.getWardID();
        if (WardID != null) {
            stmt.bindString(27, WardID);
        }
 
        String CaseID = entity.getCaseID();
        if (CaseID != null) {
            stmt.bindString(28, CaseID);
        }
 
        String SubmitDoctor = entity.getSubmitDoctor();
        if (SubmitDoctor != null) {
            stmt.bindString(29, SubmitDoctor);
        }
 
        String Department = entity.getDepartment();
        if (Department != null) {
            stmt.bindString(30, Department);
        }
 
        String Device = entity.getDevice();
        if (Device != null) {
            stmt.bindString(31, Device);
        }
 
        String Fee = entity.getFee();
        if (Fee != null) {
            stmt.bindString(32, Fee);
        }
 
        String FeeType = entity.getFeeType();
        if (FeeType != null) {
            stmt.bindString(33, FeeType);
        }
 
        String ChiefComplaint = entity.getChiefComplaint();
        if (ChiefComplaint != null) {
            stmt.bindString(34, ChiefComplaint);
        }
 
        String Test = entity.getTest();
        if (Test != null) {
            stmt.bindString(35, Test);
        }
 
        String Advice = entity.getAdvice();
        if (Advice != null) {
            stmt.bindString(36, Advice);
        }
 
        String InpatientID = entity.getInpatientID();
        if (InpatientID != null) {
            stmt.bindString(37, InpatientID);
        }
 
        String OutpatientID = entity.getOutpatientID();
        if (OutpatientID != null) {
            stmt.bindString(38, OutpatientID);
        }
 
        String Others = entity.getOthers();
        if (Others != null) {
            stmt.bindString(39, Others);
        }
 
        String Await1 = entity.getAwait1();
        if (Await1 != null) {
            stmt.bindString(40, Await1);
        }
 
        String Await2 = entity.getAwait2();
        if (Await2 != null) {
            stmt.bindString(41, Await2);
        }
 
        String Await3 = entity.getAwait3();
        if (Await3 != null) {
            stmt.bindString(42, Await3);
        }
 
        String Await4 = entity.getAwait4();
        if (Await4 != null) {
            stmt.bindString(43, Await4);
        }
 
        String Await5 = entity.getAwait5();
        if (Await5 != null) {
            stmt.bindString(44, Await5);
        }
 
        String Biopsy = entity.getBiopsy();
        if (Biopsy != null) {
            stmt.bindString(45, Biopsy);
        }
 
        String Ctology = entity.getCtology();
        if (Ctology != null) {
            stmt.bindString(46, Ctology);
        }
 
        String Pathology = entity.getPathology();
        if (Pathology != null) {
            stmt.bindString(47, Pathology);
        }
 
        String CheckDate = entity.getCheckDate();
        if (CheckDate != null) {
            stmt.bindString(48, CheckDate);
        }
 
        String RecordDate = entity.getRecordDate();
        if (RecordDate != null) {
            stmt.bindString(49, RecordDate);
        }
 
        String Printed = entity.getPrinted();
        if (Printed != null) {
            stmt.bindString(50, Printed);
        }
 
        String Upload = entity.getUpload();
        if (Upload != null) {
            stmt.bindString(51, Upload);
        }
 
        String Bespeak = entity.getBespeak();
        if (Bespeak != null) {
            stmt.bindString(52, Bespeak);
        }
 
        String Images = entity.getImages();
        if (Images != null) {
            stmt.bindString(53, Images);
        }
 
        String ReportStyle = entity.getReportStyle();
        if (ReportStyle != null) {
            stmt.bindString(54, ReportStyle);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(55, UserName);
        }
 
        String EndoType = entity.getEndoType();
        if (EndoType != null) {
            stmt.bindString(56, EndoType);
        }
 
        String StudyInstanceUID = entity.getStudyInstanceUID();
        if (StudyInstanceUID != null) {
            stmt.bindString(57, StudyInstanceUID);
        }
 
        String SeriesInstanceUID = entity.getSeriesInstanceUID();
        if (SeriesInstanceUID != null) {
            stmt.bindString(58, SeriesInstanceUID);
        }
 
        String ExaminingPhysician = entity.getExaminingPhysician();
        if (ExaminingPhysician != null) {
            stmt.bindString(59, ExaminingPhysician);
        }
 
        String ClinicalDiagnosis = entity.getClinicalDiagnosis();
        if (ClinicalDiagnosis != null) {
            stmt.bindString(60, ClinicalDiagnosis);
        }
 
        String CheckContent = entity.getCheckContent();
        if (CheckContent != null) {
            stmt.bindString(61, CheckContent);
        }
 
        String CheckDiagnosis = entity.getCheckDiagnosis();
        if (CheckDiagnosis != null) {
            stmt.bindString(62, CheckDiagnosis);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDetailMSGDBBean readEntity(Cursor cursor, int offset) {
        UserDetailMSGDBBean entity = new UserDetailMSGDBBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RecordType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PatientID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Married
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Sex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Tel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // Address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // PatientNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // CardID
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // MedHistory
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // FamilyHistory
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // Race
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Occupatior
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // InsuranceID
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // NativePlace
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // IsInHospital
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // LastCheckUserID
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // DOB
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // PatientAge
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // AgeUnit
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // CaseNo
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // ReturnVisit
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // BedID
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // WardID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // CaseID
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // SubmitDoctor
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // Department
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // Device
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // Fee
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // FeeType
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // ChiefComplaint
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // Test
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // Advice
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // InpatientID
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // OutpatientID
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // Others
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // Await1
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // Await2
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // Await3
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // Await4
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // Await5
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // Biopsy
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // Ctology
            cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46), // Pathology
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // CheckDate
            cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48), // RecordDate
            cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49), // Printed
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // Upload
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // Bespeak
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // Images
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // ReportStyle
            cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54), // UserName
            cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55), // EndoType
            cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56), // StudyInstanceUID
            cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57), // SeriesInstanceUID
            cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58), // ExaminingPhysician
            cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59), // ClinicalDiagnosis
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // CheckContent
            cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61) // CheckDiagnosis
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDetailMSGDBBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRecordType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPatientID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMarried(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPatientNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCardID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMedHistory(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFamilyHistory(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setRace(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOccupatior(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInsuranceID(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNativePlace(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsInHospital(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLastCheckUserID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDOB(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPatientAge(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setAgeUnit(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCaseNo(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setReturnVisit(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setBedID(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setWardID(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setCaseID(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSubmitDoctor(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setDepartment(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setDevice(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setFee(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setFeeType(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setChiefComplaint(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setTest(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setAdvice(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setInpatientID(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setOutpatientID(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setOthers(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setAwait1(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setAwait2(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setAwait3(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setAwait4(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setAwait5(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setBiopsy(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setCtology(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setPathology(cursor.isNull(offset + 46) ? null : cursor.getString(offset + 46));
        entity.setCheckDate(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setRecordDate(cursor.isNull(offset + 48) ? null : cursor.getString(offset + 48));
        entity.setPrinted(cursor.isNull(offset + 49) ? null : cursor.getString(offset + 49));
        entity.setUpload(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setBespeak(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setImages(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setReportStyle(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setUserName(cursor.isNull(offset + 54) ? null : cursor.getString(offset + 54));
        entity.setEndoType(cursor.isNull(offset + 55) ? null : cursor.getString(offset + 55));
        entity.setStudyInstanceUID(cursor.isNull(offset + 56) ? null : cursor.getString(offset + 56));
        entity.setSeriesInstanceUID(cursor.isNull(offset + 57) ? null : cursor.getString(offset + 57));
        entity.setExaminingPhysician(cursor.isNull(offset + 58) ? null : cursor.getString(offset + 58));
        entity.setClinicalDiagnosis(cursor.isNull(offset + 59) ? null : cursor.getString(offset + 59));
        entity.setCheckContent(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setCheckDiagnosis(cursor.isNull(offset + 61) ? null : cursor.getString(offset + 61));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDetailMSGDBBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDetailMSGDBBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDetailMSGDBBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
